---
title: "Steam Scrape Testing"
author: "Andrew"
format: html
editor: visual
---

```{r}
# Emergency Stop
remDr$close()
rD[["server"]]$stop()

```

```{r setup, include=FALSE}
library(RSelenium)
library(jsonlite)
library(stringr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(tidyquant)
```

```{r}

cases <- c(
  "Chroma Case", "Chroma 2 Case", "Falchion Case"
)

casesfinal <- c(
  "Chroma Case", "Chroma 2 Case", "Falchion Case", "Shadow Case",
  "Revolver Case", "Operation Wildfire Case", "Chroma 3 Case",
  "Gamma Case", "Gamma 2 Case", "Glove Case", "Spectrum Case",
  "Operation Hydra Case", "Spectrum 2 Case", "Clutch Case", 
  "Horizon Case", "Danger Zone Case", "Prisma Case", "CS20 Case", 
  "Shattered Web Case", "Prisma 2 Case", "Fracture Case", 
  "Operation Broken Fang Case", "Snakebite Case", 
  "Operation Riptide Case", "Dreams & Nightmares Case", 
  "Recoil Case", "Revolution Case", "Kilowatt Case", "Gallery Case"
  
)


```

```{r}

scrape_case_chart_data <- function(case_name, remDr, wait_time = 6) {
  encoded_case <- URLencode(case_name)
  url <- paste0("https://steamcommunity.com/market/listings/730/", encoded_case)

  remDr$navigate(url)
  Sys.sleep(wait_time)

  html <- remDr$getPageSource()[[1]]
  html_clean <- gsub("[\r\n\t]", "", html)

  pattern <- "var line1=\\[(\\[.*?\\])\\];"
  matches <- stringr::str_match(html_clean, pattern)

  if (is.na(matches[2])) {
    message(paste("❌ Could not extract line1 for:", case_name))
    return(NULL)
  }

  json_array <- paste0("[", matches[2], "]")

  chart_data <- tryCatch({
    fromJSON(json_array)
  }, error = function(e) {
    message(paste("❌ JSON parse error for", case_name, ":", e$message))
    return(NULL)
  })

  num_cols <- ncol(chart_data)

  df <- tibble(
    time = chart_data[, 1],
    price_usd = as.numeric(chart_data[, 2]),
    volume = if (num_cols >= 3) as.numeric(chart_data[, 3]) else NA_real_
  ) %>%
    mutate(
      time_clean = str_remove(time, " \\+0$"),
      date = parse_date_time(time_clean, orders = "b d Y H", tz = "UTC"),
      Case = case_name
    ) %>%
    select(Case, date, price_usd, volume) %>%
    filter(!is.na(date))

  return(df)
}




```

```{r}
# Start 
rD <- rsDriver(browser = "firefox", chromever = NULL, verbose = FALSE)
remDr <- rD$client


# Scrape 
all_data <- purrr::map_dfr(cases, ~ scrape_case_chart_data(.x, remDr))

# Stop  
remDr$close()
rD$server$stop()


```

# Data Refining

## Daily History

```{r}
all_data_clean <- all_data %>% 
  mutate(date = as.POSIXct(date, tz = "UTC"))

daily_closes <- all_data_clean %>%
  mutate(
    hour = hour(date),
    day = as.Date(date)
  ) %>%
  filter(hour == 1) %>%  # Keep only rows with time == 1:00
  group_by(Case, day) %>%  # In case multiple entries at 1:00, just in case
  slice_max(order_by = date, n = 1) %>%
  ungroup() %>%
  select(Case, date, price_usd, volume) %>%
  arrange(Case, date)
```

## Past Month Data

```{r}
past_month <- all_data_clean %>%
  filter(date >= Sys.Date() - months(1)) %>%
  group_by(Case) %>%
  arrange(date) %>%
  slice(-1) %>%  # removes the first row of each group
  ungroup()
```

Exchange Rates TidyQuant Ticker: "CAD=X"

```{r}
fx_usdcad <- tq_get("CAD=X", get = "stock.prices", from = "2010-01-01")

fx_usdcad_clean <- fx_usdcad %>%
  select(date, fx_rate = close)

fx_usdcad_filled <- fx_usdcad_clean %>%
  complete(date = seq.Date(min(date), max(date), by = "day")) %>%
  fill(fx_rate, .direction = "down")

```

Join all_data and create a new DF

```{r}
CAD_Converted <- all_data_clean %>%
  mutate(date_only = as.Date(date)) %>%
  left_join(fx_usdcad_filled, by = c("date_only" = "date")) %>%
  mutate(price_cad = price_usd * fx_rate) %>% 
  drop_na()

CAD_Selected <- CAD_Converted %>% 
  select(Case, date, price_cad, volume)


```

## Daily History (CAD)

```{r}
Daily_CAD <- CAD_Selected %>%
  mutate(
    hour = hour(date),
    day = as.Date(date)
  ) %>%
  filter(hour == 1) %>%  # Keep only rows with time == 1:00
  group_by(Case, day) %>%  # In case multiple entries at 1:00, just in case
  slice_max(order_by = date, n = 1) %>%
  ungroup() %>%
  select(Case, date, price_cad, volume) %>%
  arrange(Case, date)

```

## Past Month Data(CAD)

```{r}
Month_CAD <- CAD_Selected %>%
  filter(date >= Sys.Date() - months(1)) %>%
  group_by(Case) %>%
  arrange(date) %>%
  slice(-1) %>%  # removes the first row of each group
  ungroup()

```

# Visualizations

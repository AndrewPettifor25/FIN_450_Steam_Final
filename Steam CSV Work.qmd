---
title: "Steam CSV Work"
author: "Andrew"
format: html
---

```{r setup, include=FALSE}
library(RSelenium)
library(jsonlite)
library(stringr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(tidyquant)
library(readr)
library(plotly)
library(gt)
library(purrr)
library(recipes)
library(parsnip)
library(tidymodels)
library(slider)
library(rvest)
library(DT)
```

Layout Summary:

1. What is CS2
2. Why is CS2 Still booming
3. What are Cases and what are skins?
4. How do we define and measure the value of a skin
5. Examining Cases and Skins as an investment. 
6. What are the relations between skins and cases? 
7. Can we predict the future prices of skins.
8. What can we take away from this. 






```{r echo=FALSE}

cases <- c(
  "Chroma Case", "Chroma 2 Case", "Gamma Case","Glove Case","Dreams & Nightmares Case"
)

case_skins <- list(
  "Chroma Case" = c(
    "Glock-18 | Catacombs (Minimal Wear)",           # pistol
    "AK-47 | Cartel (Minimal Wear)",                 # rifle
    "AWP | Man-o'-war (Minimal Wear)"                # AWP
  ),
  "Chroma 2 Case" = c(
    "USP-S | Torque (Minimal Wear)",                 # pistol
    "M4A1-S | Hyper Beast (Minimal Wear)",           # rifle
    "AWP | Worm God (Minimal Wear)"                  # AWP
  ),
  "Gamma Case" = c(
    "Glock-18 | Wasteland Rebel (Minimal Wear)",     # pistol
    "M4A4 | Desolate Space (Minimal Wear)",          # rifle
    "AWP | Phobos (Minimal Wear)"                    # AWP-preferred random
  ),
  "Glove Case" = c(
    "USP-S | Cyrex (Minimal Wear)",                  # pistol
    "M4A4 | Buzz Kill (Minimal Wear)",               # rifle
    "P90 | Shallow Grave (Minimal Wear)"             # random
  ),
  "Dreams & Nightmares Case" = c(
    "USP-S | Ticket to Hell (Minimal Wear)",         # pistol
    "AK-47 | Nightwish (Minimal Wear)",              # rifle
    "MP9 | Starlight Protector (Minimal Wear)"       # random
  )
)

# Optinal Additional Cases
casesfinal <- c(
  "Chroma Case", "Chroma 2 Case", "Falchion Case", "Shadow Case",
  "Revolver Case", "Operation Wildfire Case", "Chroma 3 Case",
  "Gamma Case", "Gamma 2 Case", "Glove Case", "Spectrum Case",
  "Operation Hydra Case", "Spectrum 2 Case", "Clutch Case", 
  "Horizon Case", "Danger Zone Case", "Prisma Case", "CS20 Case", 
  "Shattered Web Case", "Prisma 2 Case", "Fracture Case", 
  "Operation Broken Fang Case", "Snakebite Case", 
  "Operation Riptide Case", "Dreams & Nightmares Case", 
  "Recoil Case", "Revolution Case", "Kilowatt Case", "Gallery Case"
  
)


```

```{r echo=FALSE, warning=FALSE, message=FALSE}
# CSV Import
url_skins <- "https://raw.githubusercontent.com/AndrewPettifor25/FIN_450_Steam_Final/refs/heads/main/steam_skins_raw.csv"
all_skins_data <- read_csv(url_skins)

url_cases <- "https://raw.githubusercontent.com/AndrewPettifor25/FIN_450_Steam_Final/refs/heads/main/steam_cases_raw.csv"
all_cases_data <- read_csv(url_cases)

```

```{r echo=FALSE}
# Filtering and Cleaning

all_skins_data_for_combine <- all_skins_data %>%
  rename(Item = Skin) %>%
  select(Case, Item, Item_Type, date, price_usd, volume)

all_cases_data_for_combine <- all_cases_data %>%
  mutate(Item = Case) %>%
  select(Case, Item, Item_Type, date, price_usd, volume)

all_items_data <- bind_rows(all_cases_data_for_combine, all_skins_data_for_combine)

all_items_data_clean <- all_items_data %>% 
  mutate(date = as.POSIXct(date, tz = "UTC"))

daily_item_closes <- all_items_data_clean %>%
  mutate(
    hour = hour(date),
    day = as.Date(date)
  ) %>%
  filter(hour == 1) %>%  # Keep only rows with time == 1:00
  group_by(Case, Item, Item_Type, day) %>%  # In case multiple entries at 1:00
  slice_max(order_by = date, n = 1) %>%
  ungroup() %>%
  select(Case, Item, Item_Type, date, price_usd, volume) %>%
  arrange(Case, Item, date)

past_month_items <- all_items_data_clean %>%
  filter(date >= Sys.Date() - months(1)) %>%
  group_by(Case, Item, Item_Type) %>%
  arrange(date) %>%
  slice(-1) %>%  #
  ungroup()

```

```{r echo=FALSE}
# USD-CAD Exchange 

fx_usdcad <- tq_get("CAD=X", get = "stock.prices", from = "2010-01-01")

fx_usdcad_clean <- fx_usdcad %>%
  select(date, fx_rate = close)

fx_usdcad_filled <- fx_usdcad_clean %>%
  complete(date = seq.Date(min(date), max(date), by = "day")) %>%
  fill(fx_rate, .direction = "down")

```

```{r echo=FALSE}
#Filtering and Cleaning for CAD

CAD_Converted_Items <- all_items_data_clean %>%
  mutate(date_only = as.Date(date)) %>%
  left_join(fx_usdcad_filled, by = c("date_only" = "date")) %>%
  mutate(price_cad = price_usd * fx_rate) %>% 
  drop_na()

CAD_Selected_Items <- CAD_Converted_Items %>% 
  select(Case, Item, Item_Type, date, price_cad, volume)
```

```{r echo=FALSE}
#Filtering and Cleaning for CAD

Daily_CAD_Items <- CAD_Selected_Items %>%
  mutate(
    hour = hour(date),
    day = as.Date(date)
  ) %>%
  filter(hour == 1) %>%  # Keep only rows with time == 1:00
  group_by(Case, Item, Item_Type, day) %>%  # In case multiple entries at 1:00
  slice_max(order_by = date, n = 1) %>%
  ungroup() %>%
  select(Case, Item, Item_Type, date, price_cad, volume) %>%
  arrange(Case, Item, date)
```

```{r echo=FALSE}
#Filtering and Cleaning for CAD

Month_CAD_Items <- CAD_Selected_Items %>%
  filter(date >= Sys.Date() - months(1)) %>%
  group_by(Case, Item, Item_Type) %>%
  arrange(date) %>%
  slice(-1) %>%  # removes the first row of each group
  ungroup()
```


```{r echo=FALSE}
cases_data <- all_items_data_clean %>% filter(Item_Type == "Case")
skins_data <- all_items_data_clean %>% filter(Item_Type == "Skin")

```


# Steam Player Count

```{r echo=FALSE}
# Steam Player Count Scrape
scrape_steamcharts <- function() {
  url <- "https://steamcharts.com/app/730"
  
  page <- read_html(url)
  
  steam_data <- page %>%
    html_element("table.common-table") %>%
    html_table()
  
  return(steam_data)
}

steam_data <- scrape_steamcharts()

steam_data_formatted <- steam_data %>%
  mutate(
    `Avg. Players` = comma(`Avg. Players`),
    `Peak Players` = comma(`Peak Players`)
  )
```



```{r echo=FALSE}
# Steam Player Count Bar Chart

steam_data_march <- steam_data %>%
  filter(Month != "Last 30 Days" & grepl("^March", Month)) %>%
  mutate(
    Year = sub(".* ", "", Month),
    `Avg. Players` = as.numeric(`Avg. Players`)
  ) %>%
  arrange(as.numeric(Year))

steam_data_plot <- steam_data_march %>% 
  select(Year, `Peak Players`, `Avg. Players`)


plot_ly(steam_data_plot, x = ~Year) %>%
  add_trace(
    y = ~`Avg. Players`,
    name = 'Avg. Players',
    type = 'bar'
  ) %>%
  add_trace(
    y = ~`Peak Players`,
    name = 'Peak Players',
    type = 'bar'
  ) %>%
  layout(
    barmode = 'group',
    title = "CS:GO March Player Counts by Year",
    xaxis = list(title = "Year"),
    yaxis = list(title = "Number of Players")
    
  )

```

```{r echo=FALSE}
# Steam Player Count Data Table

datatable(
  steam_data_formatted,
  options = list(
    pageLength = 10,
    autoWidth = TRUE)
  )
```
# Visualizations

## Cases
```{r echo=FALSE, warning=FALSE, message=FALSE}
cases_only <- Daily_CAD_Items %>%
  filter(Item_Type == "Case", Case %in% cases)  

plot_ly(cases_only, x = ~date, y = ~price_cad, color = ~Item, type = 'scatter', mode = 'lines') %>%
  layout(
    title = "Cases Price Comparison Over Time (CAD)",
    xaxis = list(title = "Date"),
    yaxis = list(title = "Price (CAD)"),
    legend = list(orientation = "h", y = -0.2)
  )



```



```{r echo=FALSE}
# Filtering and Cleaning

avg_last_month <- Month_CAD_Items %>%
  filter(Item_Type == "Case", Item %in% cases) %>%
  group_by(Item) %>%
  summarise(avg_last_month = mean(price_cad, na.rm = TRUE))

case_inceptions <- Daily_CAD_Items %>%
  filter(Item_Type == "Case", Item %in% cases) %>%
  group_by(Item) %>%
  summarise(inception_date = min(date))

avg_inception_month <- Daily_CAD_Items %>%
  filter(Item_Type == "Case", Item %in% cases) %>%
  left_join(case_inceptions, by = "Item") %>%
  filter(date >= inception_date & date <= inception_date + days(30)) %>%
  group_by(Item) %>%
  summarise(avg_inception = mean(price_cad, na.rm = TRUE))

avg_six_months_later <- Daily_CAD_Items %>%
  filter(Item_Type == "Case", Item %in% cases) %>%
  left_join(case_inceptions, by = "Item") %>%
  filter(date >= inception_date + months(6) & date <= inception_date + months(7)) %>%
  group_by(Item) %>%
  summarise(avg_six_month = mean(price_cad, na.rm = TRUE))

case_price_summary_gt <- avg_last_month %>%
  left_join(avg_inception_month, by = "Item") %>%
  left_join(avg_six_months_later, by = "Item") %>%
  mutate(
    change_from_inception = avg_last_month - avg_inception,
    change_from_six_month = avg_last_month - avg_six_month
  )

case_price_summary_gt %>%
  gt() %>%
  fmt_number(columns = where(is.numeric), decimals = 2) %>%
  tab_header(
    title = "Case Price Comparison in CAD",
    subtitle = "Comparing Last Month Avg vs Inception & 6-Month Post-Inception"
  ) %>%
  cols_label(
    Item = "Case",
    avg_inception = "Avg at Inception (CAD)",
    avg_six_month = "Avg at +6 Months (CAD)",
    avg_last_month = "Avg at Last Month (CAD)",
    change_from_inception = "Change vs Inception",
    change_from_six_month = "Change vs +6 Months"
  ) %>%
  data_color(
    columns = vars(change_from_inception, change_from_six_month),
    colors = scales::col_numeric(palette = c( "white", "green"), domain = NULL)
  ) %>%
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels(everything())
  )


```

## Cases vs Skins


### Chroma Case vs Skins

```{r echo=FALSE}
chroma_items <- c("Chroma Case",
                  "Glock-18 | Catacombs (Minimal Wear)",
                  "AK-47 | Cartel (Minimal Wear)",
                  "AWP | Man-o'-war (Minimal Wear)")

chroma_df <- Daily_CAD_Items %>%
  filter(Item %in% chroma_items)

plot_ly(chroma_df, x = ~date, y = ~price_cad, color = ~Item, type = 'scatter', mode = 'lines') %>%
  layout(
    title = "Chroma Case vs Skins - Price Over Time (CAD)",
    xaxis = list(title = "Date"),
    yaxis = list(title = "Price (CAD)"),
legend = list(orientation = "h", y = -0.2)   )



```

### Chroma 2 vs Skins

```{r echo=FALSE}

chroma2_items <- c("Chroma 2 Case",
                   "USP-S | Torque (Minimal Wear)",
                   "M4A1-S | Hyper Beast (Minimal Wear)",
                   "AWP | Worm God (Minimal Wear)")

chroma2_df <- Daily_CAD_Items %>%
  filter(Item %in% chroma2_items)

plot_ly(chroma2_df, x = ~date, y = ~price_cad, color = ~Item, type = 'scatter', mode = 'lines') %>%
  layout(
    title = "Chroma 2 Case vs Skins - Price Over Time (CAD)",
    xaxis = list(title = "Date"),
    yaxis = list(title = "Price (CAD)"),
legend = list(orientation = "h", y = -0.2)   )

```

### Gamma Case vs Skins

```{r echo=FALSE}
gamma_items <- c("Gamma Case",
                 "Glock-18 | Wasteland Rebel (Minimal Wear)",
                 "M4A4 | Desolate Space (Minimal Wear)",
                 "AWP | Phobos (Minimal Wear)")

gamma_df <- Daily_CAD_Items %>%
  filter(Item %in% gamma_items)

plot_ly(gamma_df, x = ~date, y = ~price_cad, color = ~Item, type = 'scatter', mode = 'lines') %>%
  layout(
    title = "Gamma Case vs Skins - Price Over Time (CAD)",
    xaxis = list(title = "Date"),
    yaxis = list(title = "Price (CAD)"),
legend = list(orientation = "h", y = -0.2)   )


```

### Glove Case vs Skins

```{r echo=FALSE}
glove_items <- c("Glove Case",
                 "USP-S | Cyrex (Minimal Wear)",
                 "M4A4 | Buzz Kill (Minimal Wear)",
                 "P90 | Shallow Grave (Minimal Wear)")

glove_df <- Daily_CAD_Items %>%
  filter(Item %in% glove_items)

plot_ly(glove_df, x = ~date, y = ~price_cad, color = ~Item, type = 'scatter', mode = 'lines') %>%
  layout(
    title = "Glove Case vs Skins - Price Over Time (CAD)",
    xaxis = list(title = "Date"),
    yaxis = list(title = "Price (CAD)"),
legend = list(orientation = "h", y = -0.2)   )


```

### Dreams & Nightmares Case vs Skins

```{r echo=FALSE}
dnm_items <- c("Dreams & Nightmares Case",
               "USP-S | Ticket to Hell (Minimal Wear)",
               "AK-47 | Nightwish (Minimal Wear)",
               "MP9 | Starlight Protector (Minimal Wear)")

dnm_df <- Daily_CAD_Items %>%
  filter(Item %in% dnm_items)

plot_ly(dnm_df, x = ~date, y = ~price_cad, color = ~Item, type = 'scatter', mode = 'lines') %>%
  layout(
    title = "Dreams & Nightmares Case vs Skins - Price Over Time (CAD)",
    xaxis = list(title = "Date"),
    yaxis = list(title = "Price (CAD)"),
    legend = list(orientation = "h", y = -0.2) 
  )


```


# Forecasts

```{r}
# Create lagged and lead prices
model_data <- Daily_CAD_Items %>%
  filter(Item_Type == "Case") %>%
  group_by(Item) %>%
  arrange(date) %>%
  mutate(
    price_tomorrow = lead(price_cad),
    price_lag_1 = lag(price_cad),
    price_change = price_cad - price_lag_1,
    date_num = as.numeric(date)
  ) %>%
  drop_na(price_tomorrow, price_lag_1) %>%
  ungroup()

# Data split
set.seed(123)
split <- initial_split(model_data, prop = 0.8)
train <- training(split)
test <- testing(split)

# Recipe
price_recipe <- recipe(price_tomorrow ~ price_cad + price_lag_1 + price_change + volume + date_num + Item, data = train) %>%
  step_dummy(all_nominal_predictors()) %>%
  step_normalize(all_numeric_predictors())

# Model spec
price_model <- linear_reg() %>%
  set_engine("lm")

# Workflow
price_workflow <- workflow() %>%
  add_recipe(price_recipe) %>%
  add_model(price_model)

# Fit
price_fit <- fit(price_workflow, data = train)

# Predict
price_preds <- predict(price_fit, new_data = test) %>%
  bind_cols(test)

# Evaluate
price_preds %>%
  metrics(truth = price_tomorrow, estimate = .pred)



```

```{r}
# Plot predicted vs actual prices
ggplot(price_preds, aes(x = .pred, y = price_tomorrow)) +
  geom_point(alpha = 0.4, color = "#1f77b4") +
  geom_abline(linetype = "dashed", color = "gray") +
  labs(
    title = "Predicted vs. Actual Price (Next Day)",
    x = "Predicted Price (CAD)",
    y = "Actual Price (CAD)"
  ) +
  theme_minimal()



```


```{r}
# Add 7-day rolling volatility
vol_data <- Daily_CAD_Items %>%
  filter(Item_Type == "Case") %>%
  group_by(Item) %>%
  arrange(date) %>%
  mutate(
    volatility_7d = slide_dbl(price_cad, sd, .before = 6, .complete = TRUE),
    price_lag_1 = lag(price_cad),
    price_change = price_cad - price_lag_1,
    date_num = as.numeric(date)
  ) %>%
  drop_na(volatility_7d, price_lag_1) %>%
  ungroup()

# Data split
set.seed(456)
vol_split <- initial_split(vol_data, prop = 0.8)
vol_train <- training(vol_split)
vol_test <- testing(vol_split)

# Recipe
vol_recipe <- recipe(volatility_7d ~ price_cad + price_change + volume + date_num + Item, data = vol_train) %>%
  step_dummy(all_nominal_predictors()) %>%
  step_normalize(all_numeric_predictors())

# Model spec
vol_model <- boost_tree(trees = 500, tree_depth = 6) %>%
  set_engine("xgboost") %>%
  set_mode("regression")

# Workflow
vol_workflow <- workflow() %>%
  add_recipe(vol_recipe) %>%
  add_model(vol_model)

# Fit
vol_fit <- fit(vol_workflow, data = vol_train)

# Predict + metrics
vol_preds <- predict(vol_fit, new_data = vol_test) %>%
  bind_cols(vol_test)

vol_preds %>%
  metrics(truth = volatility_7d, estimate = .pred)

```


```{r}
# Plot predicted vs actual volatility
ggplot(vol_preds, aes(x = .pred, y = volatility_7d)) +
  geom_point(alpha = 0.4, color = "#ff7f0e") +
  geom_abline(linetype = "dashed", color = "gray") +
  labs(
    title = "Predicted vs. Actual 7-Day Volatility",
    x = "Predicted Volatility (CAD)",
    y = "Actual Volatility (CAD)"
  ) +
  theme_minimal()


```